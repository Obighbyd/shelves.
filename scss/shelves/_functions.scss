// Returns the width of a single column (without gutters) as
// a percentage. If given a $context, this returns the column
// width relative to that number of columns.
//
//   $context - The number of columns encapsulating the column.
//              Defaults to the full width of the grid.
//
@function column-width($context: $shelves-columns) {
  @if $context >= $shelves-columns {
    @return $shelves-column-width;
  }
  @else {
    @return $shelves-column-width * (100% / columns-width($context));
  }
}

// Returns the width of the gutter as a percentage. If given a $context,
// this returns the gutter width relative to that number of columns.
//
//   $context - The number of columns encapsulating the gutter.
//              Defaults to the full width of the grid.
//
@function column-gutter($context: $shelves-columns) {
  @if $context >= $shelves-columns {
    @return $shelves-gutter;
  }
  @else {
    @return $shelves-gutter * (100% / columns-width($context));
  }
}

// Returns the total width (including gutters) of the given
// number of columns. If given a $context, this returns the
// width relative to that number of columns.
//
//   $n       - The number of columns to measure.
//   $context - The number of columns encapsulating the columns.
//              Defaults to the full width of the grid.
//
@function columns-width($n, $context: $shelves-columns) {
  @if $n >= $shelves-columns {
    @return 100%;
  }
  
  $column-width: $shelves-column-width;
  $column-gutter: $shelves-gutter;
  
  @if $context < $shelves-columns {
    $column-width: column-width($context);
    $column-gutter: column-gutter($context);
  }
  
  @return $column-width * $n + $column-gutter * ($n - 1);
}

// Returns the total distance to shift a column the given
// number of columns. If given a $context, this returns the
// distance relative to that number of columns.
//
//   $n       - The number of columns to measure.
//   $context - The number of columns encapsulating the columns.
//              Defaults to the full width of the grid.
//
@function columns-distance($n, $context: $shelves-columns) {
  @return columns-width($n, $context) + column-gutter($context);
}

// Returns a column selector with the given class name,
// appended with the given index.
//
//   $class-name - The class name to build the selector from.
//                 It should NOT have a preceding ".".
//   $index      - The index to append at the end. It will
//                 be separated by $separator.
//   $separator  - The separator between the class name and index.
//                 Defaults to $shelves-separator.
//
@function column-selector($class-name, $index, $separator: $shelves-separator) {
  @return ".#{$class-name}#{$separator}#{$index}";
}

// Returns a list consisting of a range of numbers leading up to
// the last number.
//
//   range(1, 6); // 1, 2, 3, 4, 5
//   range(1, 6, $step: 2); // 1, 3, 5
//
// Arguments:
//
//   $start - The start of the range.
//   $end   - The end of the range. This is exclusive, so this
//            number will not be in the returned range.
//   $step  - Step by the given number to create the range.
//            Defaults to 1.
//
@function range($start, $end, $step: 1) {
  $list: $start;
  $i: $start + $step;
  @while $i < $end {
    $list: join($list, $i);
    $i: $i + $step;
  }
  @return $list;
}
