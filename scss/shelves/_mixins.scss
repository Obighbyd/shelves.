// Includes the styles for the container element - namely
// some outer margins for fluid sizes.
//
//   $margin - The outer margins. Defaults to $shelves-margin.
//
@mixin container($margin: $shelves-margin) {
  padding-left: $margin;
  padding-right: $margin;
}

// Includes the styles for the row element. This includes
// a clearfix, widths, and centering.
//
//   $width - The max width of the row element. If this is
//            false, the row is completely fluid. Defaults
//            to $shelves-width.
//
@mixin row($max-width: $shelves-width) {
  @include pie-clearfix;
  width: 100%;
  
  @if $max-width != false {
    max-width: $max-width;
    margin-left: auto;
    margin-right: auto;
  }
}

// Reset a row to expand to the full width of
// its container.
@mixin reset-row {
  margin-left: 0;
  margin-right: 0;
  width: 100%;
}

// Sets up an element to be a column in the grid system.
// This is used internally to generate the default grid,
// Use span($n) instead to create columns.
@mixin column-base {
  display: block;
  float: left;
  min-height: 1px;
  position: relative;
}

// Sets the width of the element to the given number of columns.
//
//   $n       - The number of columns the element should span.
//   $context - The number of columns encapsulating the element.
//              Defaults to the full width of the grid.
//
@mixin columns-width($n, $context: $shelves-columns) {
  width: columns-width($n, $context);
}

// Includes the gutter for a column on the grid.
//
//   $context              - The number of columns encapsulating the element.
//                           Defaults to the full width of the grid.
//   $include-first-column - Includes the styles for removing the gutter
//                           on the first column in a row. Defaults to true.
//
@mixin column-gutter($context: $shelves-columns, $include-first-column: true) {
  margin-left: column-gutter($context);
  
  @if $include-first-column == true {
    &:first-child {
      @include reset-column-gutter;
    }
  }
}

// Removes the gutter of a column in a grid. This is usually added
// to the first column in a row.
@mixin reset-column-gutter {
  margin-left: 0;
}

//
//
//   $n       - The number of columns the element should span.
//   $context - The number of columns encapsulating the element.
//              Defaults to the full width of the grid.
//
@mixin column($n, $context: $shelves-columns) {
  @include column-base($context);
  @include column-gutter($context);
  @include columns-width($n, $context);
}

//
@mixin reset-column {
  float: none;
  margin-left: 0;
  margin-right: 0;
  width: auto;
}

//
@mixin column-prefix($n, $context: $shelves-columns) {
  padding-left: columns-distance($n, $context);
}

//
@mixin reset-column-prefix {
  padding-left: 0;
}

//
@mixin column-suffix($n, $context: $shelves-columns) {
  padding-right: columns-distance($n, $context);
}

//
@mixin reset-column-suffix {
  padding-right: 0;
}

//
@mixin column-push($n, $context: $shelves-columns) {
  left: columns-distance($n, $context);
}

//
@mixin reset-column-push {
  left: auto;
}

//
@mixin column-pull($n, $context: $shelves-columns) {
  right: columns-distance($n, $context);
}

//
@mixin reset-column-pull {
  right: auto;
}

// Generates the default grid classes for a modular OOCSS
// approach to using the grid. All of the selectors can be customized.
//
//   $container-selector     - Customize the selector for the container element.
//                             Defaults to ".container".
//   $row-selector           - Customize the selector for the row element.
//                             Defaults to ".row".
//   $column-selector        - Customize the selector for the columns.
//                             Defaults to ".span".
//   $prefix-selector        - Customize the selector for the prefix modifier.
//                             Defaults to ".prefix".
//   $suffix-selector        - Customize the selector for the suffix modifier.
//                             Defaults to ".suffix".
//   $push-selector          - Customize the selector for the push modifier.
//                             Defaults to ".push".
//   $pull-selector          - Customize the selector for the pull modifier.
//                             Defaults to ".pull".
//   $separator              - Customize the seperator used in the selectors.
//                             Defaults to "-".
//   $mobile-column-selector - Customize the selector for mobile columns.
//                             Defaults to ".mobile-column".
//   $reset-column-selector  - Customize the selector for reseting the column.
//                             Defaults to ".reset-column".
//   $reset-gutter-selector  - Customize the selector for reseting the gutter.
//                             Defaults to ".reset-gutter".
//
@mixin generate-shelves(
  $container-selector:     $shelves-container-selector,
  $row-selector:           $shelves-row-selector,
  $column-selector:        $shelves-column-selector,
  $prefix-selector:        $shelves-prefix-selector,
  $suffix-selector:        $shelves-suffix-selector,
  $push-selector:          $shelves-push-selector,
  $pull-selector:          $shelves-pull-selector,
  $separator:              $shelves-separator,
  $mobile-column-selector: $shelves-mobile-column-selector,
  $reset-column-selector:  $shelves-reset-column-selector,
  $reset-gutter-selector:  $shelves-reset-gutter-selector
) {
  
  #{$container-selector} {
    @include container;
  }
  
  #{$row-selector} {
    @include row;
  }

  #{enumerate($column-selector, 1, $shelves-columns - 1, $separator)} {
    @include column-base;
    @include column-gutter($include-first-column: false);
    
    &:first-child {
      @extend #{$reset-gutter-selector};
    }
  }
  
  #{$reset-gutter-selector} {
    @include reset-column-gutter;
  }

  @for $i from 1 to $shelves-columns  {
    #{$column-selector}#{$separator}#{$i} {
      @include columns-width($i);
    }
  }
    
  @for $i from 1 to $shelves-columns  {
    #{$prefix-selector}#{$separator}#{$i} {
      @include column-prefix($i);
    }
  }
    
  @for $i from 1 to $shelves-columns  {
    #{$suffix-selector}#{$separator}#{$i} {
      @include column-suffix($i);
    }
  }
    
  @for $i from 1 to $shelves-columns  {
    #{$push-selector}#{$separator}#{$i} {
      @include column-push($i);
    }
  }
    
  @for $i from 1 to $shelves-columns  {
    #{$pull-selector}#{$separator}#{$i} {
      @include column-pull($i);
    }
  }

  @for $i from 1 to $shelves-columns - 1  {
    $i: $shelves-columns - $i; // reverse the loop order
    
    #{$column-selector}#{$separator}#{$i} {
      #{enumerate($column-selector, 1, $i - 1, $separator)} {
        @include column-gutter($i, false);
  
        &:first-child {
          @extend #{$reset-gutter-selector};
        }
      }
    
      @for $j from 1 to $i {
        #{$column-selector}#{$separator}#{$j} {
          @include columns-width($j, $i);
        }
      }
        
      @for $j from 1 to $i {
        #{$prefix-selector}#{$separator}#{$j} {
          @include column-prefix($j, $i);
        }
      }
    }
  }
  
  @media screen and (max-width: 767px) {
    #{$row-selector} {
      @include reset-row;
    }
    
    #{$reset-column-selector} {
      @include reset-column;
      @include reset-column-prefix;
      @include reset-column-suffix;
      @include reset-column-push;
      @include reset-column-pull;
    }
    
    @for $i from 1 to $shelves-columns {
      $i: $shelves-columns - $i; // reverse the loop order
      
      #{$column-selector}#{$separator}#{$i} {
        @extend #{$reset-column-selector};
        
        @if $i > 1 {
          #{enumerate($column-selector, 1, $i - 1, $separator)} {
            @extend #{$reset-column-selector};
          }
        }
      }
    }
    
    #{$mobile-column-selector}#{$separator}base {
      @include column-base;
      @include column-gutter($include-first-column: false);
    
      &:first-child {
        @extend #{$reset-gutter-selector};
      }
    }
      
    #{$mobile-column-selector} {
      $mobile-step: floor($shelves-columns / $shelves-mobile-columns);
      $i: $mobile-step;
      
      @while $i < $shelves-columns {
        &#{$column-selector}#{$separator}#{$i} {
          @extend #{$mobile-column-selector}#{$separator}base;
          @include columns-width($i);
        }
        
        $i: $i + $mobile-step;
      }
    }
  }
}
