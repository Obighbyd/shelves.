// Includes the styles for the container element - namely
// some outer margins for fluid sizes.
//
//   $margin - The outer margins. Defaults to $shelves-margin.
//
@mixin container($margin: $shelves-margin) {
  padding-left: $margin;
  padding-right: $margin;
}

// Includes the styles for the row element. This includes
// a clearfix, widths, and centering.
//
//   $max-width    - The max width of the row element. If this is
//                   false, the row is completely fluid. Defaults
//                   to $shelves-max-width.
//   $min-width    - The min width, for browsers that don't support
//                   media queries. Defaults to $shelves-min-width.
//   $mobile-reset - Include styles for resetting the row at
//                   mobile sizes. Defaults to true.
//
@mixin row($max-width: $shelves-max-width, $min-width: $shelves-min-width, $mobile-reset: true) {
  @include pie-clearfix;
  width: 100%;
  
  @if $max-width != false {
    max-width: $max-width;
    margin-left: auto;
    margin-right: auto;
  }
  
  @if $min-width != false {
    min-width: $min-width;
    
    .#{$shelves-row-name} {
      min-width: 0;
    }
  }
  
  @if $mobile-reset != false {
    @media screen and (max-width: 767px) {
      @include reset-row;
    }
  }
}

// Creates a column that spans the given number of
// grid columns.
//
//   $n            - The number of columns the element should span.
//   $context      - The number of columns encapsulating the element.
//                   Defaults to the full width of the grid.
//   $mobile-reset - Include styles for resetting the column at
//                   mobile sizes. Defaults to true.
//
@mixin column($n, $context: $shelves-columns, $mobile-reset: true) {
  @include column-base($mobile-reset);
  @include column-gutter($context);
  @include columns-width($n, $context);
}

// Sets up an element to be a column in the grid system.
// This is used internally to generate grids, Use column($n)
// instead to create fully functioning columns.
//
//   $mobile-reset - Include styles for resetting the column at
//                   mobile sizes. Defaults to true.
//
@mixin column-base($mobile-reset: true) {
  display: block;
  float: left;
  min-height: 1px;
  position: relative;
  
  @if $legacy-support-for-ie7 {
    *margin-right: -1px;
  }
  
  @if $mobile-reset != false {
    @media screen and (max-width: 767px) {
      @include reset-column;
    }
  }
}

// Sets the width of the element to the given number of columns.
//
//   $n       - The number of columns the element should span.
//   $context - The number of columns encapsulating the element.
//              Defaults to the full width of the grid.
//
@mixin columns-width($n, $context: $shelves-columns) {
  width: columns-width($n, $context);
}

// Includes the gutter for a column on the grid.
//
//   $context              - The number of columns encapsulating the element.
//                           Defaults to the full width of the grid.
//   $include-first-column - Includes the styles for removing the gutter
//                           on the first column in a row. Defaults to true.
//
@mixin column-gutter($context: $shelves-columns, $include-first-column: true) {
  margin-left: column-gutter($context);
  
  @if $include-first-column == true {
    &:first-child {
      @include reset-column-gutter;
    }
  }
}
