// Adds some non-grid related responsive styles. It fixes IE 10's
// "Snap Mode" and making images fluid.
@mixin responsive-base {
  @include fix-snap-mode;

  img {
    @include fluid-media;
  }
}

// Includes the styles for the container element - namely
// some outer margins for fluid sizes.
//
//   $margin - The outer margins. Defaults to $shelves-margin.
//
@mixin container($margin: $shelves-margin) {
  padding-left: $margin;
  padding-right: $margin;
}

// Includes the styles for the row element. This includes
// a clearfix, widths, and centering.
//
//   $max-width       - The max width of the row element. If this is
//                      false, the row is completely fluid. Defaults
//                      to $shelves-max-width.
//   $min-width       - The min width, for browsers that don't support
//                      media queries. Defaults to $shelves-min-width.
//   $reset-on-tablet - Include styles for resetting the row at
//                      tablet sizes. Defaults to false.
//   $reset-on-mobile - Include styles for resetting the row at
//                      mobile sizes. Defaults to false.
//
@mixin row(
    $max-width: $shelves-max-width,
    $min-width: $shelves-min-width,
    $reset-on-tablet: false,
    $reset-on-mobile: false) {
  @include shelves-clearfix;
  @if type-of($max-width) == 'number' {
    margin-right: auto;
    margin-left: auto;
    max-width: $max-width;
  }
  @if type-of($min-width) == 'number' {
    min-width: $min-width;
  }
  @if $reset-on-tablet {
    @include on-tablet-down {
      @include reset-row;
    }
  }
  @if $reset-on-mobile {
    @include on-mobile {
      @include reset-row;
    }
  }
}

// Creates a column that spans the given number of
// grid columns.
//
//   $n               - The number of columns the element should span.
//   $context         - The number of columns encapsulating the element.
//                      Defaults to the the value of $total.
//   $first           - Does not apply the column-gutter, because this it the
//                      first column on the row. Defaults to false.
//   $total           - The total number of columns in the grid.
//                      Defaults to the value of $shelves-columns.
//   $gutter          - The width of the gutter in the root context (in %).
//                      Defaults to the value of $shelves-gutter.
//   $reset-on-tablet - Include styles for resetting the column at
//                      tablet sizes. Defaults to false.
//   $reset-on-mobile - Include styles for resetting the column at
//                      mobile sizes. Defaults to false.
//
@mixin column(
    $n,
    $context: $shelves-context,
    $first: false,
    $total: $shelves-columns,
    $gutter: $shelves-gutter,
    $reset-on-tablet: false,
    $reset-on-mobile: false) {
  @include column-base($reset-on-tablet, $reset-on-mobile);
  @include column-width($n, $context, $total, $gutter);

  @if not $first {
    @include column-gutter($context, $total, $gutter);
  }
}

// Sets up an element to be a column in the grid system.
// This is used internally to generate grids, Use column($n)
// instead to create fully functioning columns.
//
//   $reset-on-tablet - Include styles for resetting the column at
//                      tablet sizes. Defaults to false.
//   $reset-on-mobile - Include styles for resetting the column at
//                      mobile sizes. Defaults to false.
//
@mixin column-base($reset-on-tablet: false, $reset-on-mobile: false) {
  display: block;
  float: left;
  min-height: 1px;
  position: relative;

  @if $shelves-ie7-support {
    // IE6-7 incorrectly rounds up percentage widths (breaking layouts)
    // http://ejohn.org/blog/sub-pixel-problems-in-css/
    *margin-right: -1px;
  }
  @if $reset-on-tablet {
    @include on-tablet-down {
      @include reset-column;
    }
  }
  @if $reset-on-mobile {
    @include on-mobile {
      @include reset-column;
    }
  }
}

// Sets the width of the element to the given number of columns.
//
//   $n       - The number of columns the element should span.
//   $context - The number of columns encapsulating the element.
//              Defaults to the the value of $total.
//   $total   - The total number of columns in the grid.
//              Defaults to the value of $shelves-columns.
//   $gutter  - The width of the gutter in the root context (in %).
//              Defaults to the value of $shelves-gutter.
//
@mixin column-width(
    $n,
    $context: $shelves-context,
    $total: $shelves-columns,
    $gutter: $shelves-gutter) {
  width: column-width($n, $context, $total, $gutter);
}

// Includes the gutter for a column on the grid.
//
//   $context     - The number of columns encapsulating the element.
//                  Defaults to the the value of $total.
//   $total       - The total number of columns in the grid.
//                  Defaults to the value of $shelves-columns.
//   $gutter      - The width of the gutter in the root context (in %).
//                  Defaults to the value of $shelves-gutter.
//   $reset-first - Removes the gutter for the first column in a row.
//                  Defaults to false.
//
@mixin column-gutter(
    $context: $shelves-context,
    $total: $shelves-columns,
    $gutter: $shelves-gutter,
    $reset-first: false) {
  margin-left: column-gutter($context, $total, $gutter);

  @if $reset-first {
    &:first-child {
      @include reset-column-gutter;
    }
  }
}
