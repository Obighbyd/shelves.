// Generates the entire grid, made up of reusable classes for a modular OOCSS
// approach to using the grid. All of the class names can be customized.
//
//   $include-nested-columns - Include nested columns in the default grid.
//                             Defaults to true.
//   $include-mobile-resets  - Include mobile resets (remove grid for mobile
//                             sizes). Defaults to true.
//   $include-mobile-columns - Include mobile columns (special column classes
//                             for mobile sizes). Defaults to true.
//   $include-prefix         - Include prefix classes. Deafults to true.
//   $include-suffix         - Include suffix classes. Deafults to true.
//   $include-push           - Include push classes. Deafults to true.
//   $include-pull           - Include pull classes. Deafults to true.
//   $include-nested-prefix  - Include prefix classes for neseted columns.
//                             Defaults to true.
//   $include-nested-suffix  - Include suffix classes  for neseted columns.
//                             Defaults to true.
//   $include-nested-push    - Include push classes for neseted columns.
//                             Defaults to false.
//   $include-nested-pull    - Include pull classes for neseted columns.
//                             Defaults to false.
//
@mixin shelves(
  $include-nested-columns: true,
  $include-mobile-resets:  true,
  $include-mobile-columns: true,
  $include-prefix:         true,
  $include-suffix:         true,
  $include-push:           true,
  $include-pull:           true,
  $include-nested-prefix:  true,
  $include-nested-suffix:  true,
  $include-nested-push:    false,
  $include-nested-pull:    false
) {
  
  @include shelves-base;
  @include shelves-columns(
    $include-prefix: $include-prefix,
    $include-suffix: $include-suffix,
    $include-push:   $include-push,
    $include-pull:   $include-pull
  );
  
  @if $include-nested-columns == true {
    @for $i from 1 to $shelves-columns - 1  {
      // Loop background through the columns
      // to cascade the nested column properties.
      $i: $shelves-columns - $i;
    
      #{column-selector($shelves-column-name, $i)} {
        #{columns-selector($shelves-column-name)} {
          @include column-gutter($i, $include-first-column: false);
        }
        
        @include shelves-columns(
          $context:        $i,
          $include-prefix: $include-nested-prefix,
          $include-suffix: $include-nested-suffix,
          $include-push:   $include-nested-push,
          $include-pull:   $include-nested-pull
        );
      } 
    }
  }
  
  @media screen and (max-width: 767px) {
    @if $include-mobile-resets == true {
      @include shelves-resets;
    }
    @if $include-mobile-columns == true {
      // Use the extra specificity from the row class
      // to apply mobile column properties even when nested
      .#{$shelves-row-name} {
        #{columns-selector($shelves-mobile-column-name)} {
          @include column-base($mobile-reset: false);
          @include column-gutter($total: $shelves-mobile-columns);
        }
      
        @include shelves-columns(
          $column-name:    $shelves-mobile-column-name,
          $total:          $shelves-mobile-columns,
          $include-prefix: false,
          $include-suffix: false,
          $include-push:   false,
          $include-pull:   false
        );
      }
    }
  }
}

// Generates the grid's base classes, namely the
// the row and container elements.
@mixin shelves-base {
  .#{$shelves-container-name} {
    @include container;
  }
  
  .#{$shelves-row-name} {
    @include row($mobile-reset: false);
  }
  
  #{columns-selector($shelves-column-name)} {
    @include column-base($mobile-reset: false);
    @include column-gutter($include-first-column: false);
  }
  
  .#{$shelves-row-name} {
    #{columns-selector($shelves-column-name)} {
      &:first-child {
        @include reset-column-gutter;
      }
    }
  }
}

// Generates the classes used for laying out and modifying
// the columns. This can be used in different contexts, varying
// the number of columns if necessary.
//
//   $column-name           - The name of the column to generate widths for.
//                            Defaults to $shelves-column-name
//   $end                   - Where to end the loop.
//                            Defaults to the value of $total.
//   $context               - The context of generated classes.
//                            Defaults to the value of $total.
//   $total                 - The total number of columns in the grid.
//                            Defaults to the value of $shelves-columns. 
//   $gutter                - The width of the gutter in the root context (in %).
//                            Defaults to the value of $shelves-gutter.
//   $include-prefix        - Include prefix classes. Deafults to true.
//   $include-suffix        - Include suffix classes. Deafults to true.
//   $include-push          - Include push classes. Deafults to true.
//   $include-pull          - Include pull classes. Deafults to true.
//
@mixin shelves-columns(
  $column-name:           $shelves-column-name,
  $end:                   nil,
  $context:               nil,
  $total:                 $shelves-columns,
  $gutter:                $shelves-gutter,
  $include-prefix:        true,
  $include-suffix:        true,
  $include-push:          true,
  $include-pull:          true
) {
  @if type-of($context) != 'number' or $context > $total {
    $context: $total;
  }
  @if type-of($end) != 'number' or $end > $context {
    $end: $context;
  }
  @for $i from 1 to $end  {
    #{column-selector($column-name, $i)} {
      @include columns-width($i, $context, $total, $gutter);
    }
  }
  @if $include-prefix == true {
    @for $i from 1 to $end  {
      #{column-selector($shelves-prefix-name, $i)} {
        @include column-prefix($i, $context, $total, $gutter);
      }
    }
  }
  @if $include-suffix == true {
    @for $i from 1 to $end  {
      #{column-selector($shelves-suffix-name, $i)} {
        @include column-suffix($i, $context, $total, $gutter);
      }
    }
  }
  @if $include-push == true {
    @for $i from 1 to $end  {
      #{column-selector($shelves-push-name, $i)} {
        @include column-push($i, $context, $total, $gutter);
      }
    }
  }
  @if $include-pull == true {
    @for $i from 1 to $end  {
      #{column-selector($shelves-pull-name, $i)} {
        @include column-pull($i, $context, $total, $gutter);
      }
    }
  }
}

// Resets the row and column elements so they take up
// the full width of their parent element. All modifying
// effects are removed from columns as well.
@mixin shelves-resets {
  .#{$shelves-row-name} {
    @include reset-row;
    
    #{columns-selector($shelves-column-name)} {
      @include reset-column;
    }
  }
}
